CMD/powershell commands:
mdir 													-[command to make a new directory locally]
cd 													-[command to navigate to some specific directory]
del file-name												-[command to delete a file]
ren old.txt new.txt											-[Command to rename file]
echo. > file-name.txt // type nul > file-name.txt // copy con file-name.txt				-[command to create a new file with specified extension]
dir /b													-[command to display contents of the current working directory]
choco install vim											-[command to install vim]
vim cmd-file.txt											-[command to open file in vim editor]
	i --INSERT-- [MODE]
	esc :wq :q! :x [to exit]
	Shift+G, $, a - [nav to last line and last character]
notepad learn-cmd.git											-[command to open specified file in notepad]

GIT Commands:
git config --global user.name "f-name l-name" 								-[command to add name of git user throughout the machine]
git config --global user.email "e-mail" 								-[command to add email of git user throughout the machine]
git config --global color.ui auto 									-[command to set machine ui for git terminal]
git init -initialize the curresnt local directory for git 						-[command to initialize the current directory for git repository]
git clone repo-url 											-[command to clone/copy existing remote git repository]
git remote add origin repo-url										-[command to add remote origin (your project) repository url]
git remote add upstream repo-url									-[command to add remote updstream (community project) repository url]
git pull 												-[command to sync remote repository with the local repo in machine]
git remote -v												-[command to display all the added remote urls]
git push origin main											-[command to push the changes in local repo to remote repo]
git status												-[command to show the status of changes in local repo] 
git add .												-[command to add changes in local repo to staging area]
git reset file-name											-[command to discard file in staging area]
git commit -m "comment"											-[command to commit changes with the files in staging area]			
//Pushing is the process of uploading your local commits to a remote Git repository.
//Committing is the process of saving your changes to the local Git repository.
git restore --stagged file-name // git remove HEAD file-name						-[command to revert uncommited changes in a file to pripr, commited state of file]
git log													-[command to show the logs of commits]
git log branch-1 branch-2										-[command to see lolgs of multiple branches]
git log --follow file-name										-[command to view the commit history of a specific file]
git branch branch-name											-[command to create branch in current working directory]
git checkout branch-name [HEAD->branch-name]								-[command to move to other branch in current working directory]
git merge branch-name											-[command to merge target branch-name in current branch]
git checkout -b branch-name origin/branch-name								-[command to create a branch and move HEAD to it after creating]
git ls-files												-[command to list files in git repo]
git rm file1.txt file2.txt file3.txt									-[command to remove multiple files from git repo]
git mv old-file-name new-file-name									-[Command to rename file]
git rm --chched file-name 										-[command to remove file from staging area]
git restore file-name											-[command to remove file from staging area-new command]
git diff --name-only											-[command to compare the changes between the current and its parent commit and outputs only the names of the modified files]
git checkout -- file-name										-[command to discard any uncommited changes in file]
git update-index --skip-worktree file-name								-[command to remove a file from tacking any local modifications]
git update-index --no-skip-worktree file-name								-[counter command to git update -index --skip-worktree file-name]
git reset log-id 											-[command to come back to some previous commit and discard commits post to it]
git reset --soft log-id											-[command to preseve commits that are discarded in log-id commit]
git reset --hard log-id											-[command to completely eraase8 commits that are discarded in log-id commit]
git clean -df												-[command to remove all untracked files and directories in the current working directory, including subdirectories]
git stash												-[stash is temporary area to temporarily store changes similar to as stagging area]
git stash pop												-[command to re-apply changes in the most recent file of stash area and remove it]
git stash apply stash@{index}										-[command to re-apply changes at the specified idex of file from stash area and remove it]
git stash drop stash@{index}										-[command to discard changes at the specified idex of file from stash area and remove it]
git stash list												-[command to display files in stash area]
git stash clear												-[command to remove all files of stash area]
git fetch --all --prune											-[command to fetch all remote-tracking branches, remove any local-tracking branches that no longer exist on the remote repository, and fetch any new branches that have been created on the remote repository since the last fetch]
git reset --hard upstream/main	;rebase command needed after it inorder to aplly changes locally	-[command to reset your current branch to the same state as the upstream/main branch]
git reset --hard commmit-id										-[command to reset your current branch to the same state as the commit-id]
git pull upstream main											-[command to fetch and merge all remote-tracking branches]
git rebase -i commit-id											-[command to edit and merge commits]
	squash and merge commits
git branch -d local-branch-name										-[command to delete a branch from local copy]
git push origin --delete remote-branch-name								-[command to delete a branch from remote server]
git diff												-[command to show the differences between the current state of files and the changes that are not yet staged or committed
git diff --staged											-[command to show changes that are staged for the next commit]
git config --global core.exclusion file-name								-[command to exclude perticular file from being tacked of changes globally]
git diff bch1 bch2 // git diff --cached --no-index bch1 bch2						-[command to show difference in commits in the specified branches // both the committed changes and uncommitted changes]
git commit --amend -m "New Comment"									-[command to ammend the most recent commit comment]
git rebase -i HEAD~num1											-[command to display previous num1, number of commits from current HEAD position which can then be modified or merged]
git push --set -upstream origin new-basen-branch							-[command to rename the base branch]