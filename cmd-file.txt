mkdir learning-cmd-nd-git
cd D:/learning-cmd-nd-git
echo. > cmd-file.txt // type nul > cmd-file.txt // copy con cmd-file.txt
dir /b
choco install vim
vim cmd-file.txt
	i --INSERT--
	esc :wq :q! :x
	Shift+G, $, a - last line and last character
notepad learn-cmd.git
git config --global user.name "f-name l-name"
git config --global user.email "e-mail"
git config --global color.ui auto
git init -initialize the curresnt local directory for git
git clone repo-url // git remote add origin repo-url
git remote add upstream repo-url
git pull (if already some files in repo)
git remote -v
git push origin main
git status
git add .
git reset file-name
git commit -m "comment"
del file-name
//Pushing is the process of uploading your local commits to a remote Git repository.
//Committing is the process of saving your changes to the local Git repository.
git restore --stagged file-name // git remove HEAD file-name
git log
git log branch-1 branch-2
hit log --follow file-name
git branch branch-name
git checkout branch-name [HEAD->branch-name]
git merge branch-name
git checkout -b branch-name origin/branch-name
git ls-files
git rm file1.txt file2.txt file3.txt
git rm --chched <file> (remove from staging area)
git rm --cached file-name
git diff --name-only (compares the changes between the current branch (or commit) and its parent commit and outputs only the names of the modified files)
git checkout -- file-name (to discard any uncommited changes in file)
git update-index --no-skip-worktree <file>
git update-index --skip-worktree example.txt
git reset log-id (come back to some previous commit and discard commits post to it)
git restore file-name
git clean -df
git stash (stash is temporary area to store commits)
git stash pop
git stash list
git stash clear
git fetch --all --prune
git reset --hard upstream/main
git reset --hard commmit-id
git pull upstream main
git rebase -i commit-id
	squash and merge commits
git branch -d local-branch-name
git push origin --delete remote-branch-name
git diff
git diff --staged
git config --global core.exclusion file-name
git diff branch-1 branch-2
git commit --amend -m "New Comment"
git rebase -i HEAD~num1